from configparser import ConfigParser
from logging import getLogger, basicConfig, INFO

from libs.core import mail_send, get_credentials
from libs.winaudit import WinServerAudit


def log_source_check():
    """Generates an email report of missing Windows Server log sources.

    Required Input:
    None.  The required information is generated by the WinServerAudit
    class.

    Ouput:
    This function generates an email and does not return anything or
    have any output beyond the email sent.

    Exceptions:
    None."""
    # Loading the configuration file.
    config = ConfigParser()
    config.read('config.cnf')
    # Retrieving ldap password
    ldap_pwd = get_credentials({
        'api_key': config['scss']['api'],
        'otp': config['scss']['otp'],
        'userid': config['scss']['user'],
        'url': config['scss']['url']
    })
    # Setting the ldap configuration.
    ldap_info = {
        'ldap_url': config['ldap']['ldap_url'],
        'bind_dn': config['ldap']['ldap_dn'],
        'bind_pwd': ldap_pwd

    }
    server_ous = config['servers']['ous'].split('|')
    # Instantiating the WinServerAudit class and beginning the audit.
    win_audit = WinServerAudit()
    # Generating a list of Windows servers from the OUs specified in
    # the configuration file.  Note: the results of the get_servers
    # method are stored in the self.server_list instance variable.
    win_audit.get_servers(ldap_info, server_ous)
    # Getting a list of log sources from Q-Radar.
    log_sources = win_audit.get_siem_sources()
    # Generating log source exception list.  Note: the exceptions are
    # stored inthe self.no_log_sources instance variable
    win_audit.get_siem_source_ex(log_sources)
    win_audit.get_log_source_ex(log_sources)
    # Generating and sending the email.
    #
    # This portion of the email is for servers in AD that are not
    # configured as log sources
    msg_body = (
        '*' * 64 + '\n' +
        'Number of servers in AD that are not log sources: ' +
        str(len(win_audit.no_log_servers)) + '\n' +
        'Log source exceptions: ' + '\n'
        )
    for server in win_audit.no_log_servers:
        msg_body += server + '\n'
    msg_body += '*' * 64 + '\n'
    # This portion of the email is for servers that are configured as
    # log sources but are not in AD.
    msg_body += (
        '\n' * 2 +
        'Number of log sources not in AD:' +
        str(len(win_audit.invalid_servers)) + '\n' +
        'Log sources not in AD: ' + '\n'
        )
    for log_source in win_audit.invalid_servers:
        msg_body += log_source + '\n'
    msg_body += '*' * 64 + '\n'
    mail_info = {
        'sender': config['mail']['sender'],
        'recipients': config['mail']['rcpt'],
        'subject': 'Log Source Report',
        'server': config['mail']['server'],
        'body': msg_body
    }
    mail_send(mail_info)


if __name__ == '__main__':
    # Starting and configuring logging.
    log = getLogger(__name__)
    basicConfig(
        format='%(asctime)s %(name)s %(levelname)s: %(message)s',
        datefmt='%m/%d/%Y %H:%M:%S',
        level=INFO,
        filename='siem_report.log'
    )
    # Running the SIEM log source check function.
    log_source_check()
